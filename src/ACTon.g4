grammar ACTon;

program : (actor)+ main;
actor : ACTOR IDENTIFIER {System.out.print("ActorDec: " + $IDENTIFIER.getText());} (EXTENDS IDENTIFIER {System.out.print(", " + $IDENTIFIER.getText());})? {System.out.println("");} LPARENTH INTVALUE RPARENTH LBRACE knownActor actorVars (msgHandler)* RBRACE;
knownActor : KNOWNACTORS LBRACE (IDENTIFIER {System.out.print("knownActor: " + $IDENTIFIER.getText());} IDENTIFIER {System.out.println(", " + $IDENTIFIER.getText());} SEMICOLON)* RBRACE;
actorVars : ACTORVARS LBRACE (varDec)* RBRACE;
msgHandler : MSGHANDLER {System.out.print("MsgHandlerDec: ");}(IDENTIFIER {System.out.print($IDENTIFIER.getText());}| INITIAL {System.out.print($INITIAL.getText());}) LPARENTH (RPARENTH | (argDec (COMMA argDec)* RPARENTH)) {System.out.println("");} LBRACE (varDec)*(handlerContent)* RBRACE;
main : MAIN LBRACE (actorDec)* RBRACE;
actorDec : IDENTIFIER {System.out.print("ActorInstantiation: " + $IDENTIFIER.getText());} IDENTIFIER {System.out.print(", " + $IDENTIFIER.getText());} initialInp {System.out.println("");} COLON functionInp SEMICOLON;
forLoop : FOR {System.out.println("For: loop");} LPARENTH (varEval)? SEMICOLON (expression)? SEMICOLON (varEval)? RPARENTH ((LBRACE (handlerContent | BREAK SEMICOLON | CONTINUE SEMICOLON)* RBRACE) | handlerContent);
ifStatement : IF {System.out.println("Conditional: if");} LPARENTH (expression) RPARENTH ((LBRACE (handlerContent)* RBRACE) | handlerContent) (ELSE {System.out.println("Conditional: else");} ((LBRACE (handlerContent)* RBRACE) | handlerContent))?;
printFunc : PRINT {System.out.println("Built-in: Print");} LPARENTH ((expression)) RPARENTH SEMICOLON;
functionCall : {System.out.print("MsgHandlerCall: ");} (idDotid | IDENTIFIER {System.out.print($IDENTIFIER.getText());}) {System.out.println("");}   functionInp SEMICOLON;
initialInp: LPARENTH (RPARENTH | ((expression {System.out.print(", " + $expression.text);}) (COMMA (expression {System.out.print(", " + $expression.text);}))* RPARENTH));
functionInp : LPARENTH (RPARENTH | ((expression) (COMMA (expression))* RPARENTH));
handlerContent : varEval SEMICOLON | forLoop | ifStatement | printFunc | functionCall;
argDec : (primitive IDENTIFIER {System.out.print(", " + $IDENTIFIER.getText());}) | (INT IDENTIFIER {System.out.print(", " + $IDENTIFIER.getText());} LSQBRACE INTVALUE RSQBRACE);
varDec : {System.out.print("VarDec: ");} ((primitive {System.out.print($primitive.text + ", ");} IDENTIFIER {System.out.print($IDENTIFIER.getText());}{System.out.println("");} SEMICOLON) | (INT {System.out.print("Array, ");} IDENTIFIER {System.out.print($IDENTIFIER.getText());}{System.out.println("");} LSQBRACE INTVALUE RSQBRACE SEMICOLON));
primitive : STRING | INT | BOOLEAN;
varEval : (lValue {System.out.println("Operator: =");} EQUALS (expression));
lValue : IDENTIFIER (LSQBRACE (expression) RSQBRACE)?;
expression : exp01 | {System.out.println("Operator: =");} exp01 EQUALS expression;
exp01 : exp1 | exp1 QUESTION {System.out.println("Operator: ?:");} expression COLON expression;
exp0 : exp1 | {System.out.println("Operator: ||");} exp1 OR exp0;
exp1 : exp2 | {System.out.println("Operator: &&");} exp2 AND exp1;
exp2 : exp3 | {System.out.println("Operator: ==");} exp3 ISEQUAL exp2 | {System.out.println("Operator: !=");} exp3 NOTEQUAL exp2;
exp3 : exp4 | {System.out.println("Operator: <");} exp4 LT exp3 | {System.out.println("Operator: >");} exp4 GT exp3;
exp4 : {System.out.println("Operator: +");} exp5 PLUS exp4 | {System.out.println("Operator: -");} exp5 MINUS exp4 | exp5 ;
exp5 : exp6 | {System.out.println("Operator: *");} exp6 MULT exp5 | {System.out.println("Operator: /");} exp6 DIV exp5 | {System.out.println("Operator: %");} exp6 MOD exp5;
exp6 : exp7 | {System.out.println("Operator: --");} MINUSMINUS exp7 | {System.out.println("Operator: ++");} PLUSPLUS exp7 | {System.out.println("Operator: !");} NOT exp7 | {System.out.println("Operator: -(one operand)");} MINUS exp7;
exp7 : {System.out.println("Operator: ++");} exp8 PLUSPLUS | {System.out.println("Operator: --");} exp8 MINUSMINUS | {System.out.println("Operator: []");} exp8 LSQBRACE expression RSQBRACE | exp8;
exp8 : exp9 | {System.out.println("Operator: ()");} LPARENTH (expression) RPARENTH;
exp9 :  IDENTIFIER | INTVALUE | BOOLEANVALUE | STRINGVALUE | SENDER | idDotid;
idDotid : ( (SELF {System.out.print("Self");} | SENDER {System.out.print("Sender");} | IDENTIFIER {System.out.print($IDENTIFIER.getText());} ) DOT) IDENTIFIER {System.out.print(", " + $IDENTIFIER.getText());};


MSGHANDLER : 'msghandler';
INITIAL : 'initial';
EXTENDS : 'extends';
ACTORVARS : 'actorvars';
KNOWNACTORS : 'knownactors';
ACTOR : 'actor';
PRINT : 'print';
FOR : 'for';
ELSE : 'else';
IF : 'if';
SENDER : 'sender';
SELF : 'self';
MAIN : 'main';
STRING : 'string';
BOOLEAN : 'boolean';
INT : 'int';
CONTINUE : 'continue';
BREAK : 'break';
STRINGVALUE : '"'~["]*'"';
INTVALUE : [0] | [1-9]+[0-9]*;
BOOLEANVALUE : 'true' | 'false';
WS : [ \t\r\n]+ -> skip;
COMMENT : '//' -> skip;
COMMENTLINE : COMMENT (~[\n\r])* -> skip;
IDENTIFIER : [A-Za-z0-9]+;
COMMA : ',';
COLON : ':';
SEMICOLON : ';';
RBRACE : '}';
LBRACE : '{';
RPARENTH : ')';
LPARENTH : '(';
LSQBRACE : '[';
RSQBRACE : ']';
PLUS : '+';
MINUS: '-';
MULT: '*';
DIV: '/';
MOD: '%';
PLUSPLUS: '++';
MINUSMINUS: '--';
ISEQUAL: '==';
NOTEQUAL: '!=';
LT : '<';
GT : '>';
AND : '&&';
OR : '||';
NOT : '!';
EQUALS : '=';
DOT : '.';
QUESTION : '?';